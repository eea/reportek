# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2018-01-17 08:33
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import edw.djutils.protected.fields
import reportek.core.models.reporting


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseWorkflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('core.demoautoqaworkflow', 'Workflow - Auto QA'), ('core.demofailqaworkflow', 'demo fail qa workflow'), ('core.demopassqaworkflow', 'demo pass qa workflow')], db_index=True, max_length=255)),
                ('name', models.CharField(max_length=100)),
                ('previous_state', models.CharField(blank=True, max_length=60, null=True)),
                ('current_state', models.CharField(blank=True, max_length=60, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'workflow',
                'db_table': 'core_workflow',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=256, null=True, unique=True)),
                ('abbr', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Envelope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('finalized', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='EnvelopeFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', edw.djutils.protected.fields.ProtectedFileField(max_length=512, upload_to=reportek.core.models.reporting.EnvelopeFile.get_envelope_directory)),
                ('name', models.CharField(max_length=256, validators=[reportek.core.models.reporting.validate_filename])),
                ('xml_schema', models.CharField(blank=True, max_length=200, null=True)),
                ('envelope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='core.Envelope')),
            ],
            options={
                'db_table': 'core_envelope_file',
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=256, null=True, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Obligation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True)),
                ('terminated', models.BooleanField(default=False)),
                ('active_since', models.DateTimeField()),
                ('active_until', models.DateTimeField(null=True)),
                ('reporting_duration', models.SmallIntegerField(null=True)),
                ('reporting_frequency', models.SmallIntegerField(null=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='obligations', to='core.Client')),
                ('instrument', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='obligations', to='core.Instrument')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ObligationSpec',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('is_current', models.BooleanField(default=False)),
                ('draft', models.BooleanField(default=True)),
                ('schema', django.contrib.postgres.fields.ArrayField(base_field=models.URLField(max_length=1024), size=None)),
                ('workflow_class', models.CharField(blank=True, choices=[('reportek.core.models.workflows.demo_auto_qa.DemoFailQAWorkflow', 'DemoFailQAWorkflow'), ('reportek.core.models.workflows.demo_auto_qa.DemoPassQAWorkflow', 'DemoPassQAWorkflow'), ('reportek.core.models.workflows.demo_auto_qa.DemoAutoQAWorkflow', 'DemoAutoQAWorkflow')], max_length=256, null=True)),
                ('qa_xmlrpc_uri', models.CharField(default='http://xmlconv.edw.ro:8080/RpcRouter', max_length=200)),
                ('obligation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specs', to='core.Obligation')),
            ],
            options={
                'verbose_name': 'Obligation Specification',
                'db_table': 'core_oblig_spec',
            },
        ),
        migrations.CreateModel(
            name='ObligationSpecReporter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'core_oblig_spec_reporter',
            },
        ),
        migrations.CreateModel(
            name='QAJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('qa_job_id', models.IntegerField()),
                ('qa_script_id', models.CharField(blank=True, max_length=20, null=True)),
                ('qa_script_name', models.CharField(blank=True, max_length=200, null=True)),
                ('completed', models.BooleanField(default=False)),
                ('refreshing', models.BooleanField(default=False)),
                ('envelope_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='qa_jobs', to='core.EnvelopeFile')),
            ],
            options={
                'db_table': 'core_qa_job',
            },
        ),
        migrations.CreateModel(
            name='QAJobResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.IntegerField(choices=[(0, 'READY'), (1, 'NOT_READY'), (2, 'FATAL_ERROR'), (3, 'LIGHT_ERROR')])),
                ('value', models.TextField(blank=True, null=True)),
                ('metatype', models.CharField(blank=True, max_length=60, null=True)),
                ('script_title', models.CharField(max_length=100)),
                ('feedback_status', models.CharField(choices=[('BLOCKER', 'BLOCKER'), ('ERROR', 'ERROR'), ('WARNING', 'WARNING'), ('INFO', 'INFO'), ('UNKNOWN', 'UNKNOWN')], max_length=40)),
                ('feedback_message', models.CharField(blank=True, max_length=200, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='core.QAJob')),
            ],
            options={
                'db_table': 'core_qa_job_result',
                'get_latest_by': 'updated_at',
            },
        ),
        migrations.CreateModel(
            name='Reporter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=256, null=True, unique=True)),
                ('abbr', models.CharField(max_length=32, null=True, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReporterSubdivision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=128, null=True)),
            ],
            options={
                'verbose_name': 'Reporter Subdivision',
                'db_table': 'core_reporter_subdiv',
            },
        ),
        migrations.CreateModel(
            name='ReporterSubdivisionCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=128, null=True)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subdivision_categories', to='core.Reporter')),
            ],
            options={
                'verbose_name': 'Reporter Subdivision Category',
                'verbose_name_plural': 'Reporter Subdivision Categories',
                'db_table': 'core_reporter_subdiv_cat',
            },
        ),
        migrations.CreateModel(
            name='ReportingCycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('reporting_start_date', models.DateField()),
                ('reporting_end_date', models.DateField(blank=True, null=True)),
                ('is_open', models.BooleanField(default=True)),
                ('obligation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reporting_cycles', to='core.Obligation')),
                ('obligation_spec', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reporting_cycles', to='core.ObligationSpec')),
            ],
            options={
                'db_table': 'core_reporting_cycle',
            },
        ),
        migrations.CreateModel(
            name='TransitionEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.PositiveIntegerField()),
                ('transition', models.CharField(max_length=60)),
                ('from_state', models.CharField(max_length=60)),
                ('to_state', models.CharField(max_length=60)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'workflow event',
                'db_table': 'core_transition_event',
            },
        ),
        migrations.CreateModel(
            name='UploadToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(db_index=True, default=reportek.core.models.reporting.default_token, max_length=100, unique=True)),
                ('filename', models.CharField(max_length=256)),
                ('tus_id', models.CharField(blank=True, max_length=32, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('valid_until', models.DateTimeField(default=reportek.core.models.reporting.token_valid_until)),
                ('envelope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='upload_tokens', to='core.Envelope')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='upload_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'core_upload_token',
                'ordering': ('-created_at',),
            },
        ),
        migrations.AddField(
            model_name='reportersubdivision',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subdivisions', to='core.ReporterSubdivisionCategory'),
        ),
        migrations.AddField(
            model_name='obligationspecreporter',
            name='reporter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Reporter'),
        ),
        migrations.AddField(
            model_name='obligationspecreporter',
            name='spec',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ObligationSpec'),
        ),
        migrations.AddField(
            model_name='obligationspecreporter',
            name='subdivision_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.ReporterSubdivisionCategory'),
        ),
        migrations.AddField(
            model_name='obligationspec',
            name='reporters',
            field=models.ManyToManyField(through='core.ObligationSpecReporter', to='core.Reporter'),
        ),
        migrations.AddField(
            model_name='envelope',
            name='obligation_spec',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='envelopes', to='core.ObligationSpec'),
        ),
        migrations.AddField(
            model_name='envelope',
            name='reporter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='envelopes', to='core.Reporter'),
        ),
        migrations.AddField(
            model_name='envelope',
            name='reporter_subdivision',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='envelopes', to='core.ReporterSubdivision'),
        ),
        migrations.AddField(
            model_name='envelope',
            name='reporting_cycle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='envelopes', to='core.ReportingCycle'),
        ),
        migrations.AddField(
            model_name='envelope',
            name='workflow',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='envelope', to='core.BaseWorkflow'),
        ),
        migrations.CreateModel(
            name='DemoAutoQAWorkflow',
            fields=[
            ],
            options={
                'verbose_name': 'Workflow - Auto QA',
                'verbose_name_plural': 'Workflows - Auto QA ',
                'proxy': True,
                'indexes': [],
            },
            bases=('core.baseworkflow',),
        ),
        migrations.AlterUniqueTogether(
            name='transitionevent',
            unique_together=set([('timestamp', 'object_id', 'from_state', 'to_state')]),
        ),
        migrations.AlterUniqueTogether(
            name='reportersubdivisioncategory',
            unique_together=set([('reporter', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='reportersubdivision',
            unique_together=set([('category', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='qajob',
            unique_together=set([('envelope_file', 'qa_job_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='obligationspec',
            unique_together=set([('obligation', 'version')]),
        ),
        migrations.AlterUniqueTogether(
            name='envelopefile',
            unique_together=set([('envelope', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='envelope',
            unique_together=set([('reporter', 'obligation_spec', 'reporting_cycle')]),
        ),
        migrations.CreateModel(
            name='DemoFailQAWorkflow',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('core.demoautoqaworkflow',),
        ),
        migrations.CreateModel(
            name='DemoPassQAWorkflow',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('core.demoautoqaworkflow',),
        ),
    ]
