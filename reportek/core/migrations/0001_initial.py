# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-11-13 14:25
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.fields.ranges
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import reportek.core.models.reporting


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseWorkflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('core.demoautoqaworkflow', 'Workflow - Auto QA')], db_index=True, max_length=255)),
                ('name', models.CharField(max_length=100)),
                ('previous_state', models.CharField(blank=True, max_length=60, null=True)),
                ('current_state', models.CharField(blank=True, max_length=60, null=True)),
            ],
            options={
                'verbose_name': 'workflow',
                'db_table': 'core_workflow',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('acronym', models.CharField(blank=True, max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iso', models.CharField(max_length=2, unique=True)),
                ('name', models.CharField(max_length=60)),
            ],
            options={
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='Envelope',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=256)),
                ('reporting_period', django.contrib.postgres.fields.ranges.DateRangeField()),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Country')),
            ],
        ),
        migrations.CreateModel(
            name='EnvelopeFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=reportek.core.models.reporting.EnvelopeFile.get_envelope_directory)),
                ('envelope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Envelope')),
            ],
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
            ],
        ),
        migrations.CreateModel(
            name='Obligation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('description', models.TextField(blank=True)),
                ('last_update', models.DateField()),
                ('next_deadline', models.DateField(blank=True, null=True)),
                ('next_deadline2', models.DateField(blank=True, null=True)),
                ('report_freq_months', models.IntegerField(blank=True, null=True)),
                ('report_freq', models.CharField(blank=True, max_length=30, null=True)),
                ('continuous_reporting', models.BooleanField(default=False)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Client')),
                ('delivery_countries', models.ManyToManyField(to='core.Country')),
            ],
        ),
        migrations.CreateModel(
            name='ObligationGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('workflow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.BaseWorkflow')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransitionEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('object_id', models.PositiveIntegerField()),
                ('transition', models.CharField(max_length=60)),
                ('from_state', models.CharField(max_length=60)),
                ('to_state', models.CharField(max_length=60)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'workflow event',
            },
        ),
        migrations.AddField(
            model_name='obligation',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.ObligationGroup'),
        ),
        migrations.AddField(
            model_name='obligation',
            name='instrument',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.Instrument'),
        ),
        migrations.AddField(
            model_name='envelope',
            name='obligation_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ObligationGroup'),
        ),
        migrations.AddField(
            model_name='envelope',
            name='workflow',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='envelope', to='core.BaseWorkflow'),
        ),
        migrations.AddField(
            model_name='collection',
            name='countries',
            field=models.ManyToManyField(to='core.Country'),
        ),
        migrations.AddField(
            model_name='collection',
            name='obligation_groups',
            field=models.ManyToManyField(to='core.ObligationGroup'),
        ),
        migrations.CreateModel(
            name='DemoAutoQAWorkflow',
            fields=[
            ],
            options={
                'verbose_name': 'Workflow - Auto QA',
                'verbose_name_plural': 'Workflows - Auto QA ',
                'proxy': True,
                'indexes': [],
            },
            bases=('core.baseworkflow',),
        ),
        migrations.AlterUniqueTogether(
            name='transitionevent',
            unique_together=set([('timestamp', 'object_id', 'from_state', 'to_state')]),
        ),
        migrations.AlterUniqueTogether(
            name='envelope',
            unique_together=set([('obligation_group', 'country', 'reporting_period')]),
        ),
    ]
